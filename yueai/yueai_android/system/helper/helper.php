<?php defined('YUEAI') or exit('Access Denied!');class Helper{    	const COOKIE_KEY = "$%^&*(DUYGBDNDY^FDShfs7）（*&……%sdfds8dfg7ds";		static $_Bcookie = array();		public static function uint($num)	{	    return max(0, (int)$num);	}		/**	 * 设置cookie	 	 * @author liyang	 *	 * @param string $name	 * @param string $value	 * @param int    $expire	 * @param string $path	 * @param string $domain	 *	 */	public static function setCookie($name,$value,$expire=0,$path="/",$domain = '')	{	    header( 'P3P: CP="CAO DSP COR CUR ADM DEV TAI PSA PSD IVAi IVDi CONi TELo OTPi OUR DELi SAMi OTRi UNRi PUBi IND PHY ONL UNI PUR FIN COM NAV INT DEM CNT STA POL HEA PRE GOV"');				$cookieName = "Boyaa[".GAMENAME."][".PLATFORM."]";				$expire = $expire == 0 ? null : time()+$expire;				setcookie($cookieName."[$name]",$value,$expire,$path,$domain);				setcookie($cookieName."[{$name}_lock]",md5($value.self::COOKIE_KEY),$expire,$path,$domain);	}		/**	 * 获取cookie	 *	 * @author liyang	 *	 * @param {str} $name	 *	 * @return string|null	 */	public static function getCookie($name)	{				$_COOKIE['Boyaa'][GAMENAME][PLATFORM][$name] = stripslashes($_COOKIE['Boyaa'][GAMENAME][PLATFORM][$name]);				if ($_COOKIE['Boyaa'][GAMENAME][PLATFORM][$name."_lock"] == md5($_COOKIE['Boyaa'][GAMENAME][PLATFORM][$name].self::COOKIE_KEY))		{			if ($name == 'userInfo')			{				return (array) json_decode($_COOKIE['Boyaa'][GAMENAME][PLATFORM][$name],true);			}			else 			{				return $_COOKIE['Boyaa'][GAMENAME][PLATFORM][$name];			}		}	}		/**	 * 删除cookie	 *	 * @author liyang	 *	 * @param {str} $name	 *	 * @return void	 */	public static function delCookie($name)	{		unset($_COOKIE['Boyaa'][$name]);		unset($_COOKIE['Boyaa'][$name]['lock']);				$nameLock = "Boyaa[".GAMENAME."][".PLATFORM."][{$name}._lock]";				setcookie($nameLock,'',-10000);		setcookie($name,'',-10000);	}    /**     * 替换字符串     *     * @author 黄国星     *     * @param array $desc     * @param str   $string     *     * @return string     */    public static function formatDesc(array $desc, $string)    {        $search  = array_keys($desc);        $replace = array_values($desc);                return str_replace($search, $replace, $string);    }        /**     * 返回到第二天七点的时间差（秒）     * 若在午夜，就返回到当天七点的时间差          *     * @return int     */    public static function time2Seven()     {        $whichDay = (int)date("G")>= 7?strtotime("tomorrow"):strtotime("today");                return strtotime("7 hours", $whichDay)-time();    }     /**     * 返回到第二天七点的时间差（秒）     * 若在午夜，就返回到当天七点的时间差          *     * @return int     */    public static function time2tomorrow()     {        return strtotime("tomorrow")-time();    }     /**     * 抓取网页     *     * @author sjh     *     * @param array $post_data post的数据,为空时表示get请求     * @param string $json 返回数据格式，0表示json     *     * @return string     */	static  function curl($url, $post_data = array(), $json = 1, $timeout = 20) 	{		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $url);		curl_setopt($ch, CURLOPT_HEADER, 0);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);				curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);		if(!empty($post_data))		{			curl_setopt($ch, CURLOPT_POST, true);	        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);		}				$result = curl_exec ( $ch );		curl_close($ch);				return $data = empty($json)?$result:json_decode($result, true);	}		/**	 * 跳转页面	 * 	 * @author sjh	 * 	 * @param string $url	 * @param string $type	 */	static function redirect($url, $type = 'html') 	{		switch($type) 		{			case 'html':				echo '<meta http-equiv="refresh" content="0;url=' . $url . '">';				break;			case 'js':				echo '<script type="text/javascript">top.location.replace("' . $url . '");</script>';				break;		}		exit;	}	static function getip(){		if($_SERVER['REMOTE_ADDR']) {			$ip = $_SERVER['REMOTE_ADDR'];		}else if($_SERVER['HTTP_CLIENT_IP']){			$ip = $_SERVER['HTTP_CLIENT_IP'];		}else if($_SERVER['HTTP_X_FORWARDED_FOR']){			$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];		}		return $ip;    }    /**	* 返回在给出的概率范围内能否发生	* $rate 在0到99直接	* @return bool 	*/    public static function luckRate($rate)    {		//计算概率		$number = mt_rand(0,1000000);//产生随机数		//产生的随即数是否在命中概率 		if($number <= $rate*10000)			return true;		else			return false;		    }    /**	 * 全概率计算	 *	 * @param array $input array('a'=>0.5,'b'=>0.2,'c'=>0.4)	 * @param int $pow 小数点位数	 * @return array key	 */	 public static function random($input, $pow = 2) {	    $much = pow(10, $pow);	    $max  = array_sum($input) * $much;	    $rand = mt_rand(1, $max);	    $base = 0;	    foreach ($input as $k => $v) {	        $min = $base * $much + 1;	        $max = ($base + $v) * $much;	        if ($min <= $rand && $rand <= $max) {	            return $k;	        } else {	            $base += $v;	        }	    }	    return false;	}	/**	 * 獲得IP	 */	public static function getip_new(){		//获取客户端IP		if(getenv('HTTP_CLIENT_IP') && strcasecmp(getenv('HTTP_CLIENT_IP'), 'unknown')){			$PHP_IP = getenv('HTTP_CLIENT_IP');		}elseif(getenv('HTTP_X_FORWARDED_FOR') && strcasecmp(getenv('HTTP_X_FORWARDED_FOR'), 'unknown')){			$PHP_IP = getenv('HTTP_X_FORWARDED_FOR');		}elseif(getenv('REMOTE_ADDR') && strcasecmp(getenv('REMOTE_ADDR'), 'unknown')){			$PHP_IP = getenv('REMOTE_ADDR');		}elseif(isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], 'unknown')){			$PHP_IP = $_SERVER['REMOTE_ADDR'];		}		preg_match("/[\d\.]{7,15}/", $PHP_IP, $ipmatches);		$PHP_IP = $ipmatches[0] ? $ipmatches[0] : 'unknown';		return $PHP_IP;	}	}