<?php !defined('BOYAA') and exit('Access Denied!');/** * 新版本数据上报 */class WatchDog{	//客户端自定义上报类型	private static $deType = array('online_define','bycoins_define');			private static $online_define = array(											//实时统计地址											'url'=>'http://bylor.boyaa.com/online/',																						//实时统计统计项											'param'  => array(																'logged_at',																'online_num',																'playing_num',																'spectator_num',																'income_num',																'user_increase_num'															 )										 );	protected static $_instance = array();		protected static $api = 106;					//平台ID 默认普通版本	protected static $pconfig = array();			//平台配置		/**	 * @return WatchDog 	 */	public static function factory($api=106)	{						if(!isset(self::$_instance['WatchDog']) || !is_object(self::$_instance['WatchDog']))		{			self::$_instance['WatchDog'] = new WatchDog();		}		//参数配置		self::$api = $api;		self::$pconfig = Core_Game::$mconfig[self::$api];				//Logs::factory()->debug('updata/mconfig',self::$pconfig,self::$api);		return self::$_instance['WatchDog'];	}		/**	 * 日志数据处理，替换 \r, \n, | 为空白, 因为这三个字符是日志服务保留字节	 */	private function byl_encode_argument(&$value, $key) {		$value = strtr($value, array("\r" => "", "\n" => ""));		$value = str_replace('|', "", $value);	}		/**	 * 	 * 发送实时数据	 * @param (string) realDate	 * @param (array) $game_data	 * @return realDate	 */	public function realDate($act_name, array $aGet_param, array $aPost_param)	{		if (!in_array($act_name, self::$deType))		{			return false;		}				$sUrl = $this->makeParam($act_name, $aGet_param);				/************POST************/		$oCurl = curl_init();		if(stripos($sUrl,"http://")!==FALSE)		{			curl_setopt($oCurl, CURLOPT_SSL_VERIFYPEER, FALSE);			curl_setopt($oCurl, CURLOPT_SSL_VERIFYHOST, false);		}		curl_setopt($oCurl, CURLOPT_URL, $sUrl);		curl_setopt($oCurl, CURLOPT_RETURNTRANSFER, 1 );		curl_setopt($oCurl, CURLOPT_POST,true);		curl_setopt($oCurl, CURLOPT_POSTFIELDS, json_encode($aPost_param));		curl_setopt($oCurl, CURLOPT_TIMEOUT, 50);//超时设置		$sContent = curl_exec($oCurl);		$aStatus = curl_getinfo($oCurl);		curl_close($oCurl);		if(intval($aStatus["http_code"])==200)		{			return $sContent;		}		else		{			return $aStatus;		}	}	/**	 * 制作参数	 */	private function makeParam($act_name, $arrays = array())	{		if (!($param = self::$$act_name))		{			return false;		}		$signValue = self::$pconfig[4];		$postUrl = '';		foreach ((array)$arrays as $key=>$array)		{			if(in_array($key, $param['param']))			{ 				$signValue .= $array;			}			$postUrl .= '/'.$array;		}		$signValue .= self::$pconfig[5];		return ($param['url'] . self::$pconfig[4] . '/' . md5($signValue) . $postUrl);	}		/**	 * boyaa log report	 * 	 * 向日志服务器上游戏报日志	 *	 * @game_data array 关联数组,游戏数据，最终通过byl_encode_argument()去掉\r, \n, |并且json格式上报给日志服务器	 * @act_name string API名称	 * @bpid string 32位，由数据中心分配给相应用产品线	 * @keep_socket 默认为false, false:发送后关闭socket连接 true:保持socket链接在一个PHP的生命周期	 * @error_code 引用错误代码 	 * @error_message 引用错误信息	 * @host 日志服务器绑定Ip。一般使用默认127.0.0.1即可。	 * @port 日志服务器绑定端口.一般使用默认端口号即可	 **/	function byl_watchdog($act_name, $game_data, $keep_socket = false, &$error_code = 0, &$error_message = '', $host = '127.0.0.1', $port = 1106) 	{		if($act_name=="user_signup"){			Logs::factory()->debug("updata/register",$game_data,self::$pconfig);		}		static $socket = null;		$bpid = self::$pconfig[4];		if (strlen($bpid) != 32) {			$error_code = 10002;			$error_message = "valid bpid({$bpid})";			Logs::factory()->debug('updata/error10002',$bpid);			return false;		}				if (empty($game_data) || !is_array($game_data)) {			$error_code = 10003;			$error_message = "empty game data";			Logs::factory()->debug('updata/error10003',$game_data);			return false;		}				if (empty($host) || empty($port)) {			$error_code = 10001;			$error_message = "the host or port was empty";			Logs::factory()->debug('updata/error10001',$host,$port);			return false;		}		$socket = stream_socket_client("udp://{$host}:{$port}", $error_code, $error_message, 300);		if (!$socket) { 			Logs::factory()->debug('updata/errorsocket',$host,$port);			return false;		}		//处理参数		array_walk($game_data,array($this,'byl_encode_argument'));		//log fromat bpid|report_at|act_name game_data_json		$log_buff_str = sprintf("%s|%s|%s\t%s\r\n", 			$bpid,			isset($_SERVER['REQUEST_TIME']) && $_SERVER['REQUEST_TIME'] ? $_SERVER['REQUEST_TIME'] : time(),			$act_name,			json_encode($game_data)		);				$flag = fwrite($socket, $log_buff_str);		if($act_name=="user_signup"){			error_log($log_buff_str."\n",3,APP_LOG_PATH . "updata/bufstrregister".date("Y-m-d").".txt");			Logs::factory()->debug("updata/socket","udp://{$host}:{$port}",$flag,$socket);		}		if (!$keep_socket) 		{			fclose($socket);			$socket = null;		}		return true;	}}?>